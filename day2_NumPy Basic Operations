#Exercise: NumPy Basic Operations

#Exeercise 1: Basic NumPy Array Creation
# Cara lama (Python biasa)
numbers = [1, 2, 3, 4, 5]
result = []
for num in numbers:
    result.append(num + 1)
print(result)  # [2, 3, 4, 5, 6]

# Cara baru (NumPy)
import numpy as np
numbers = np.array([1, 2, 3, 4, 5])
result = numbers + 1
print(result)  # [2 3 4 5 6]

#Exercise 2: Basic Array list
import numpy as np

# Dari list biasa
scores = [85, 90, 78, 92]
np_scores = np.array(scores)
print(np_scores)  # [85 90 78 92]

# 1. Array isi nol (berguna untuk placeholder)
zeros = np.zeros(5)  # [0. 0. 0. 0. 0.]

# 2. Array isi satu
ones = np.ones(3)    # [1. 1. 1.]

# 3. Array angka berurutan
sequence = np.arange(1, 6)  # [1 2 3 4 5]

# 4. Array angka random (untuk testing)
random_nums = np.random.random(4)  # [0.37 0.95 0.73 0.59] (contoh)

# EXERCISE 3: NumPy Array 2D
# Data nilai siswa (baris = siswa, kolom = mata pelajaran)
grades = np.array([
    [85, 90, 78],  # Alice: Math, English, Science
    [92, 88, 95],  # Bob: Math, English, Science  
    [78, 85, 82]   # Charlie: Math, English, Science
])

print(grades)
# [[85 90 78]
#  [92 88 95]
#  [78 85 82]]

#Cara access data sepertii excel
# Ambil nilai Alice (baris pertama)
alice_scores = grades[0]  # [85 90 78]

# Ambil semua nilai Math (kolom pertama)
math_scores = grades[:, 0]  # [85 92 78]

# Ambil nilai English Alice (baris 0, kolom 1)
alice_english = grades[0, 1]  # 90

# EXERCISE 4: Simple Mathematical Operations

math_scores = np.array([85, 92, 78, 88, 76])

# Tambah semua nilai dengan 5 (bonus points)
bonus_scores = math_scores + 5
print(bonus_scores)  # [90 97 83 93 81]

# Kalikan dengan 1.1 (10% bonus)
boosted_scores = math_scores * 1.1
print(boosted_scores)  # [93.5 101.2 85.8 96.8 83.6]

#Basic operations:
scores = np.array([80, 85, 90, 75, 95])

print("Original:", scores)
print("Plus 10:", scores + 10)      # Tambah 10 ke semua
print("Minus 5:", scores - 5)       # Kurang 5 dari semua  
print("Kali 2:", scores * 2)        # Kali 2 semua
print("Bagi 2:", scores / 2)        # Bagi 2 semua

# EXERCISE 5: Simple Statistics (No Complicated Formulas)
scores = np.array([85, 90, 78, 92, 88])

# Statistik dasar
print("Nilai tertinggi:", np.max(scores))      # 92
print("Nilai terendah:", np.min(scores))       # 78  
print("Rata-rata:", np.mean(scores))           # 86.6
print("Jumlah total:", np.sum(scores))         # 433

#EXERCISE 6: Data Filter (Search for Eligibles)
scores = np.array([85, 90, 78, 92, 88, 65, 95])

# Cari nilai > 85
high_scores = scores > 85
print(high_scores)  # [False  True False  True  True False  True]

# Ambil nilai-nilai yang > 85
filtered_scores = scores[high_scores]
print(filtered_scores)  # [90 92 88 95]

#EXERCISE 7: Reshape (Change Array Shape)
# Data 1D (seperti list biasa)
data = np.array([1, 2, 3, 4, 5, 6])
print("Original:", data)  # [1 2 3 4 5 6]

# Ubah jadi 2D (seperti tabel 2x3)
table_2x3 = data.reshape(2, 3)
print("2x3 table:")
print(table_2x3)
# [[1 2 3]
#  [4 5 6]]

# Ubah jadi tabel 3x2
table_3x2 = data.reshape(3, 2)
print("3x2 table:")
print(table_3x2)
# [[1 2]
#  [3 4]
#  [5 6]]

#EXERCISE 8: Real Example - Data Normalization
# Data mentah (skala berbeda)
exam_scores = np.array([85, 90, 78, 92])     # 0-100
heights = np.array([165, 170, 160, 175])     # 160-180

print("Exam scores:", exam_scores)
print("Heights:", heights)

# Cara normalisasi sederhana
def normalize_simple(data):
    min_val = np.min(data)
    max_val = np.max(data)
    normalized = (data - min_val) / (max_val - min_val)
    return normalized

norm_scores = normalize_simple(exam_scores)
norm_heights = normalize_simple(heights)

print("Normalized scores:", norm_scores)   # [0.5  1.   0.   0.85714286]
print("Normalized heights:", norm_heights) # [0.33 0.67 0.   1.  ]

#EXERCISE 9: Simple Functions
def analyze_scores(scores):
    """
    Function untuk analisis nilai sederhana
    Input: array nilai
    Output: dictionary dengan statistik
    """
    result = {
        'total_students': len(scores),
        'highest': np.max(scores),
        'lowest': np.min(scores), 
        'average': np.mean(scores),
        'passed': np.sum(scores >= 75)  # Yang lulus (>= 75)
    }
    return result

# Test function
class_scores = np.array([85, 90, 72, 88, 65, 78, 92, 69, 87, 91])
stats = analyze_scores(class_scores)

print("Class Statistics:")
for key, value in stats.items():
    print(f"{key}: {value}")
    
#EXERCISE 10: Mini Project - Grade Calculator
def grade_calculator():
    """
    Simple grade calculator using NumPy
    """
    # Sample student data
    students = ['Alice', 'Bob', 'Charlie', 'Diana', 'Eve']
    
    # Grades for 3 subjects: Math, English, Science
    grades = np.array([
        [85, 88, 90],  # Alice
        [78, 82, 85],  # Bob
        [92, 89, 94],  # Charlie  
        [88, 91, 87],  # Diana
        [75, 79, 82]   # Eve
    ])
    
    # Calculate averages for each student
    student_averages = np.mean(grades, axis=1)
    
    # Calculate averages for each subject
    subject_averages = np.mean(grades, axis=0)
    
    # Results
    print("GRADE REPORT")
    print("-" * 30)
    
    for i, name in enumerate(students):
        avg = student_averages[i]
        grade_letter = 'A' if avg >= 90 else 'B' if avg >= 80 else 'C' if avg >= 70 else 'D'
        print(f"{name}: {avg:.1f} ({grade_letter})")
    
    print(f"\nSubject Averages:")
    subjects = ['Math', 'English', 'Science']
    for i, subject in enumerate(subjects):
        print(f"{subject}: {subject_averages[i]:.1f}")

# Run the calculator
grade_calculator()
